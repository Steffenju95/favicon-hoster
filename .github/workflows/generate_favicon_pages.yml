# Name des Workflows, der in der GitHub Actions UI angezeigt wird
name: Generate Favicon Pages

# Trigger: Wann soll dieser Workflow ausgeführt werden?
on:
  push:
    # Nur bei Push-Ereignissen auf dem Hauptbranch (passen Sie ggf. den Namen an)
    branches:
      - main 
    # Und nur, wenn sich die Datei 'icons.txt' geändert hat
    paths:
      - 'icons.txt'

# Definition der Jobs, die ausgeführt werden sollen
jobs:
  # Ein Job namens 'build_and_deploy'
  build_and_deploy:
    # Auf welchem Betriebssystem soll der Job laufen?
    runs-on: ubuntu-latest
    
    # Berechtigungen, die der Job benötigt
    permissions:
      # Erforderlich, um Änderungen zurück ins Repository zu pushen
      contents: write 
      
    # Die einzelnen Schritte, die der Job ausführt
    steps:
      # Schritt 1: Code des Repositories herunterladen
      - name: Checkout Repository Code
        uses: actions/checkout@v4 # Verwendet eine Standard-GitHub-Action

      # Schritt 2: Python-Umgebung einrichten
      - name: Set up Python
        uses: actions/setup-python@v5 # Verwendet eine Standard-GitHub-Action
        with:
          python-version: '3.x' # Stellt sicher, dass Python 3 verfügbar ist

      # Schritt 3: Python-Skript zur Seitengenerierung ausführen
      - name: Generate Pages 
        id: generate # Gibt diesem Schritt eine ID (optional, hier nicht direkt verwendet)
        run: python generate_pages.py # Führt Ihr Python-Skript aus

      # Schritt 4: Neue oder geänderte Seiten committen und pushen
      - name: Commit and Push new pages 
        run: |
          # Git konfigurieren (notwendig für den Commit im Namen des Actions Bot)
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Alle .html-Dateien im Hauptverzeichnis zum Staging hinzufügen
          # (Geht davon aus, dass generate_pages.py die Dateien dort erstellt)
          git add *.html 
          
          # Prüfen, ob es tatsächlich Änderungen zum Committen gibt
          # 'git diff --staged --quiet' gibt Exit-Code 0 zurück, WENN es KEINE Änderungen gibt.
          # Das '!' kehrt das um, d.h. der Code im 'if' läuft nur, WENN es Änderungen gibt.
          if ! git diff --staged --quiet; then
            echo "Änderungen gefunden, erstelle Commit..."
            git commit -m "Generate or update favicon pages" # Commit-Nachricht
            echo "Pushe Änderungen..."
            git push # Pusht die Änderungen zurück ins Repository
          else
            # Keine Änderungen gefunden, nichts zu tun
            echo "Keine neuen oder geänderten HTML-Seiten zum Committen."
          fi
